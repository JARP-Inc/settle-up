// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  paypalEmail   String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  debts             Tab[]       @relation("DebtorTab")
  credits           Tab[]       @relation("CreditorTab")
  debtorTabAction   TabAction[] @relation("DebtorTabAction")
  creditorTabAction TabAction[] @relation("CreditorTabAction")
}

model Tab {
  amount     Float
  settled    Boolean @default(false)
  debtor     User    @relation("DebtorTab", fields: [debtorID], references: [id])
  creditor   User    @relation("CreditorTab", fields: [creditorID], references: [id])
  debtorID   String // owes money     (from)
  creditorID String // is owed money  (to)

  @@id([debtorID, creditorID])
  @@unique([debtorID, creditorID])
  @@index([debtorID])
  @@index([creditorID])
}

model TabAction {
  tabActionID String   @id @default(cuid())
  amount      Float
  date        DateTime @default(now())
  debtor      User     @relation("DebtorTabAction", fields: [debtorID], references: [id])
  creditor    User     @relation("CreditorTabAction", fields: [creditorID], references: [id])
  debtorID    String // owes money     (from)
  creditorID  String // is owed money  (to)

  @@index([debtorID])
  @@index([creditorID])
  @@map("TabAction")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
